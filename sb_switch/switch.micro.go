// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: switch.proto

/*
Package shackbus is a generated protocol buffer package.

It is generated from these files:
	switch.proto

It has these top-level messages:
	None
	Terminal
	PortName
	PortRequest
	Port
	Device
*/
package shackbus

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for SbSwitch service

type SbSwitchService interface {
	GetPort(ctx context.Context, in *PortName, opts ...client.CallOption) (*Port, error)
	SetPort(ctx context.Context, in *PortRequest, opts ...client.CallOption) (*None, error)
	GetDevice(ctx context.Context, in *None, opts ...client.CallOption) (*Device, error)
}

type sbSwitchService struct {
	c    client.Client
	name string
}

func NewSbSwitchService(name string, c client.Client) SbSwitchService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "shackbus"
	}
	return &sbSwitchService{
		c:    c,
		name: name,
	}
}

func (c *sbSwitchService) GetPort(ctx context.Context, in *PortName, opts ...client.CallOption) (*Port, error) {
	req := c.c.NewRequest(c.name, "SbSwitch.GetPort", in)
	out := new(Port)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sbSwitchService) SetPort(ctx context.Context, in *PortRequest, opts ...client.CallOption) (*None, error) {
	req := c.c.NewRequest(c.name, "SbSwitch.SetPort", in)
	out := new(None)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sbSwitchService) GetDevice(ctx context.Context, in *None, opts ...client.CallOption) (*Device, error) {
	req := c.c.NewRequest(c.name, "SbSwitch.GetDevice", in)
	out := new(Device)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SbSwitch service

type SbSwitchHandler interface {
	GetPort(context.Context, *PortName, *Port) error
	SetPort(context.Context, *PortRequest, *None) error
	GetDevice(context.Context, *None, *Device) error
}

func RegisterSbSwitchHandler(s server.Server, hdlr SbSwitchHandler, opts ...server.HandlerOption) error {
	type sbSwitch interface {
		GetPort(ctx context.Context, in *PortName, out *Port) error
		SetPort(ctx context.Context, in *PortRequest, out *None) error
		GetDevice(ctx context.Context, in *None, out *Device) error
	}
	type SbSwitch struct {
		sbSwitch
	}
	h := &sbSwitchHandler{hdlr}
	return s.Handle(s.NewHandler(&SbSwitch{h}, opts...))
}

type sbSwitchHandler struct {
	SbSwitchHandler
}

func (h *sbSwitchHandler) GetPort(ctx context.Context, in *PortName, out *Port) error {
	return h.SbSwitchHandler.GetPort(ctx, in, out)
}

func (h *sbSwitchHandler) SetPort(ctx context.Context, in *PortRequest, out *None) error {
	return h.SbSwitchHandler.SetPort(ctx, in, out)
}

func (h *sbSwitchHandler) GetDevice(ctx context.Context, in *None, out *Device) error {
	return h.SbSwitchHandler.GetDevice(ctx, in, out)
}
